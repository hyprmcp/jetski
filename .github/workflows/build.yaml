# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Build Jetski

on:
  push:
    branches:
      - 'main'
    tags:
      - '*'
  pull_request:

jobs:
  validate-migrations:
    name: Validate migrations
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - run: hack/validate-migrations.sh

  build:
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: test-user
          POSTGRES_PASSWORD: test-password
          POSTGRES_DB: jetski
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    name: Build
    timeout-minutes: 10
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: 'go.mod'
          check-latest: true
          cache-dependency-path: |
            go.sum
      - name: Install pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          version: 10
      - name: Setup node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '24'
          cache: pnpm
          registry-url: 'https://registry.npmjs.org'
      - name: Generate commit hash
        id: hash
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Install frontend dependencies with pnpm
        run: pnpm install

      - name: Lint with prettier
        run: pnpm run lint
      - name: Lint with golangci-lint
        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0
        with:
          version: latest

      - name: Build frontend
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        run: pnpm run build:prod
      - name: Build frontend and upload source maps (tag only)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          pnpm run build:prod -- --source-map=true || exit 1
          pnpm run sentry-upload || exit 1
          rm internal/frontend/dist/ui/browser/*.map || exit 1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          VERSION: ${{ github.ref_name }}

      - name: Build application
        run: go build -ldflags="$LDFLAGS" -o dist/jetski .
        env:
          CGO_ENABLED: '0'
          LDFLAGS: >-
            -X github.com/jetski-sh/jetski/internal/buildconfig.version=${{ github.ref_name }}
            -X github.com/jetski-sh/jetski/internal/buildconfig.commit=${{ steps.hash.outputs.sha_short }}

#      - name: Start Jetski and verify migrations
#        shell: bash
#        run: dist/jetski serve &
#          sleep 5 &&
#          curl http://localhost:8080/internal/environment -f &&
#          psql $DATABASE_URL -c "select version > 0, dirty from schema_migrations" --csv -t | grep "t,f" &&
#          pkill -SIGTERM jetski &&
#          dist/jetski migrate --down
#        env:
#          DATABASE_URL: postgres://test-user:test-password@localhost:5432/jetski
#          OIDC_URL: "-"
#          OIDC_CLIENT_ID: "-"

      - name: Generate SBOM for frontend project
        uses: anchore/sbom-action@7b36ad622f042cab6f59a75c2ac24ccb256e9b45 # v0.20.4
        with:
          file: pnpm-lock.yaml
          output-file: dist/frontend.spdx.json
          format: spdx-json
          upload-release-assets: false

      - name: Login to GitHub Container Registry (tag only)
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            ghcr.io/jetski-sh/jetski
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.description=Jetski
      - name: Docker build (push on tag only)
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        id: build-push
        with:
          platforms: ${{ startsWith(github.ref, 'refs/tags/') && 'linux/amd64,linux/arm64' || 'linux/amd64' }}
          context: .
          file: Dockerfile
          push: ${{ startsWith(github.ref, 'refs/tags/') }}
          sbom: true
          provenance: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
      - name: Sign the images with GitHub OIDC Token
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        env:
          DIGEST: ${{ steps.build-push.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}
