// Code generated by controller-gen. DO NOT EDIT.

package applyconfiguration

import (
	v1alpha1 "github.com/hyprmcp/jetski/internal/kubernetes/api/v1alpha1"
	apiv1alpha1 "github.com/hyprmcp/jetski/internal/kubernetes/applyconfiguration/api/v1alpha1"
	internal "github.com/hyprmcp/jetski/internal/kubernetes/applyconfiguration/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=jetski.sh, Version=v1alpha1
	case v1alpha1.SchemeGroupVersion.WithKind("AuthorizationSpec"):
		return &apiv1alpha1.AuthorizationSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("DynamicClientRegistrationSpec"):
		return &apiv1alpha1.DynamicClientRegistrationSpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MCPGateway"):
		return &apiv1alpha1.MCPGatewayApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("MCPGatewaySpec"):
		return &apiv1alpha1.MCPGatewaySpecApplyConfiguration{}
	case v1alpha1.SchemeGroupVersion.WithKind("ProjectSpec"):
		return &apiv1alpha1.ProjectSpecApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
